/*
-----------------------------------------------------------------------------
Filename:    PluginDshow.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC9 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#ifndef __PluginDshow_h_
#define __PluginDshow_h_

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif

#include <OgreEntity.h>
#include <OgreLogManager.h>
#include <OgreRoot.h>
#include <OgreViewport.h>
#include <OgreSceneManager.h>
#include <OgreRenderWindow.h>
#include <OgreConfigFile.h>

#include <OISEvents.h>

#include <VideoFrame.h>
#include <VideoManager.h>
#include <stdio.h>

#include <OgreTextureManager.h>
#include <OgreMaterialManager.h>
#include <OgreMaterial.h>
#include <OgreTechnique.h>
#include <OgreStringConverter.h>
#include <OgreHardwarePixelBuffer.h>
#include <OgreExternalTextureSourceManager.h>
//#include <OgreDataStream.h>
#include "Timer.h"
#include "PluginDShowParams.h"
#include "PluginParams.h"

#define OGREVIDEO_EXPORT extern "C" __declspec(dllexport)
#define _OgreDsPluginExport __declspec(dllexport) 

class PluginExport PluginDshow : 
										public Ogre::FrameListener, 
										public Ogre::ExternalTextureSource,
										public VideoManager
{
public:

	std::map<std::string,Ogre::TexturePtr> mTextures;
	bool mbInit;

	public:
		PluginDshow(int num_worker_threads=1);
		~PluginDshow();

		/**
			@remarks
				This function is called to init this plugin - do not call directly
		*/
		bool initialise();
		void shutDown();

		/**
			@remarks
				Creates a texture into an already defined material
				All setting should have been set before calling this.
				Refer to base class ( ExternalTextureSource ) for details
			@param material_name
				Material  you are attaching a movie to.
		*/
		void createDefinedTexture(const Ogre::String& material_name,
                                  const Ogre::String& group_name = Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);
		
		void AdjustTextureIfNeeded(VideoClip* clip,	Ogre::TexturePtr pTexture);

		void destroyAdvancedTexture(const Ogre::String& sTextureName,
                                    const Ogre::String& groupName = Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);

		bool frameStarted(const Ogre::FrameEvent& evt);

        bool setParameter(const Ogre::String &name,const Ogre::String &value);
        Ogre::String getParameter(const Ogre::String &name) const;
		// Cached Video Stream Parameters
		unsigned long mUpsideDown;
		unsigned long mColorKeyEnable;
		unsigned long mColorKeyRatio;
		unsigned long mColorKeyThresh;
		int           mHorzCropPercent;
		int           mVertCropPercent;
		int           mCapWidth;
		int           mCapHeight;

		unsigned long mStrmStatus;
		Ogre::String mMaterialName;
		Ogre::String mTextureName;
		VideoManager* getVideoManager();
};

#endif // #ifndef __PluginDshow_h_
