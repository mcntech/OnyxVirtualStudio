/*
-----------------------------------------------------------------------------
Filename:    BaseApplication.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#include "BaseApplication.h"

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif


//-------------------------------------------------------------------------------------
BaseApplication::BaseApplication(void)
    : mRoot(0),
    mCamera(0),
    mSceneMgr(0),
    mWindow(0),
    mResourcesCfg(Ogre::StringUtil::BLANK),
    mPluginsCfg(Ogre::StringUtil::BLANK),
    mTrayMgr(0),
    mCameraMan(0),
    mStatusPanel(0),
	mHelpPanelF1(0),
	mHelpPanelF2(0),
    mCursorWasVisible(false),
    mShutDown(false),
    mInputManager(0),
    mMouse(0),
    mKeyboard(0),
	mfUseManualConfig(1)
{
	mVideoMode = "864 x 480 @ 32-bit colour";
	mFullScreen = "No";
	mRenderingSystem = "Direct3D9";
}

//-------------------------------------------------------------------------------------
BaseApplication::~BaseApplication(void)
{
#ifdef ENABLE_ONSCREEN_HELP
    if (mTrayMgr) 
		delete mTrayMgr;
#endif
    if (mCameraMan) delete mCameraMan;

    //Remove ourself as a Window listener
    Ogre::WindowEventUtilities::removeWindowEventListener(mWindow, this);
    windowClosed(mWindow);
    delete mRoot;
}

//-------------------------------------------------------------------------------------
bool BaseApplication::configure(void)
{
    // Show the configuration dialog and initialise the system
    // You can skip this and use root.restoreConfig() to load configuration
    // settings if you were sure there are valid ones saved in ogre.cfg
	bool bResult = false;

	if(mfUseManualConfig) {
		bResult = manualInitialize();
	} else {
		bResult = (mRoot->restoreConfig() || mRoot->showConfigDialog());
	}

	if(bResult)
    {
        // If returned true, user clicked OK so initialise
        // Here we choose to let the system create a default rendering window by passing 'true'
        mWindow = mRoot->initialise(true, "Onyx Virtual Studio");

        // Let's add a nice window icon
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
        HWND hwnd;
        mWindow->getCustomAttribute("WINDOW", (void*)&hwnd);
        LONG iconID   = (LONG)LoadIcon( GetModuleHandle(0), MAKEINTRESOURCE(IDI_APPICON) );
        SetClassLong( hwnd, GCL_HICON, iconID );
#endif
		mWindow->setDeactivateOnFocusChange(false);
        return true;
    }
    else
    {
        return false;
    }
}
//-------------------------------------------------------------------------------------
void BaseApplication::chooseSceneManager(void)
{
    // Get the SceneManager, in this case a generic one
    mSceneMgr = mRoot->createSceneManager(Ogre::ST_GENERIC);
}
//-------------------------------------------------------------------------------------
void BaseApplication::createCamera(void)
{
    // Create the camera
    mCamera = mSceneMgr->createCamera("PlayerCam");

    // Position it at 500 in Z direction
    mCamera->setPosition(Ogre::Vector3(0,0,240));
    // Look back along -Z
    mCamera->lookAt(Ogre::Vector3(0,0,-300));
    mCamera->setNearClipDistance(1);

    //mCameraMan = new OgreBites::SdkCameraMan(mCamera);   // create a default camera controller
	mCameraMan = new OvsCameraMan(mCamera, mfCheckBounds);
}
//-------------------------------------------------------------------------------------
void BaseApplication::createFrameListener(void)
{
    Ogre::LogManager::getSingletonPtr()->logMessage("*** Initializing OIS ***");
    OIS::ParamList pl;
    size_t windowHnd = 0;
    std::ostringstream windowHndStr;

    mWindow->getCustomAttribute("WINDOW", &windowHnd);
    windowHndStr << windowHnd;
    pl.insert(std::make_pair(std::string("WINDOW"), windowHndStr.str()));

    mInputManager = OIS::InputManager::createInputSystem( pl );

    mKeyboard = static_cast<OIS::Keyboard*>(mInputManager->createInputObject( OIS::OISKeyboard, true ));
//#ifdef EN_MOUSE
#ifdef ENABLE_ONSCREEN_HELP
    mMouse = static_cast<OIS::Mouse*>(mInputManager->createInputObject( OIS::OISMouse, true ));
    mMouse->setEventCallback(this);
#endif
    mKeyboard->setEventCallback(this);
//#endif
    //Set initial mouse clipping size
    windowResized(mWindow);

    //Register as a Window listener
    Ogre::WindowEventUtilities::addWindowEventListener(mWindow, this);

#ifdef ENABLE_ONSCREEN_HELP
    mTrayMgr = new OgreBites::SdkTrayManager("InterfaceName", mWindow, mMouse, this);
    //mTrayMgr->showFrameStats(OgreBites::TL_BOTTOMLEFT);
    //mTrayMgr->showLogo(OgreBites::TL_BOTTOMRIGHT);
    mTrayMgr->hideCursor();

    // create a params panel for displaying sample details
    Ogre::StringVector itemsStatus;
    itemsStatus.push_back("Stream1");
    itemsStatus.push_back("Stream2");
    itemsStatus.push_back("Stream3");
    itemsStatus.push_back("Stream4");
    itemsStatus.push_back("Stream5");
    itemsStatus.push_back("Stream6");
    itemsStatus.push_back("");
    itemsStatus.push_back("Output0");
    itemsStatus.push_back("Output1");
    mStatusPanel = mTrayMgr->createParamsPanel(OgreBites::TL_NONE, "StatusPanel", 200, itemsStatus);
    mStatusPanel->hide();

	Ogre::StringVector itemsKeyMapsF1;
	itemsKeyMapsF1.push_back("F1 : Close/Open this window");
	itemsKeyMapsF1.push_back("Alt+Tab : Release Keyboard");
	itemsKeyMapsF1.push_back("Esc : Close Application");
	itemsKeyMapsF1.push_back("1 : Focus Display1");
	itemsKeyMapsF1.push_back("2 : Focus Display2");
	itemsKeyMapsF1.push_back("3 : Focus Display3");
	itemsKeyMapsF1.push_back("P : Paly/Pause Foucs Stream");
	itemsKeyMapsF1.push_back("O : Restart Focus Stream");
	itemsKeyMapsF1.push_back("0 : View All All Streams");
	itemsKeyMapsF1.push_back("Q : Save View for FOcus Stream");
	itemsKeyMapsF1.push_back("Shft+Q :Reset All Views");

	mHelpPanelF1 = mTrayMgr->createParamsPanel(OgreBites::TL_NONE, "KeyMaps1", 300, itemsKeyMapsF1);
    mHelpPanelF1->hide();

	Ogre::StringVector itemsKeyMapsF2;
	itemsKeyMapsF2.push_back("----Anchor-----");
	itemsKeyMapsF2.push_back("J :Hide/Show");
	itemsKeyMapsF2.push_back("M :Foward");
	itemsKeyMapsF2.push_back("U :Backward");
	itemsKeyMapsF2.push_back("H :Left");
	itemsKeyMapsF2.push_back("K :Right");
	itemsKeyMapsF2.push_back("I :Up");
	itemsKeyMapsF2.push_back("N :Down");
	itemsKeyMapsF2.push_back("I :Up");
	itemsKeyMapsF2.push_back("Y :Scale Up");
	itemsKeyMapsF2.push_back("B :Scale Down");
	itemsKeyMapsF2.push_back("X :Lock/Unlock");

    mHelpPanelF2 = mTrayMgr->createParamsPanel(OgreBites::TL_NONE, "KeyMaps2", 300, itemsKeyMapsF2);
    mHelpPanelF2->hide();
#endif
    mRoot->addFrameListener(this);
}
//-------------------------------------------------------------------------------------
void BaseApplication::destroyScene(void)
{

}
//-------------------------------------------------------------------------------------
void BaseApplication::createViewports(void)
{
    // Create one viewport, entire window
    Ogre::Viewport* vp = mWindow->addViewport(mCamera);
    vp->setBackgroundColour(Ogre::ColourValue(0,0,0));

    // Alter the camera aspect ratio to match the viewport
    mCamera->setAspectRatio(Ogre::Real(vp->getActualWidth()) / Ogre::Real(vp->getActualHeight()));
	//mCamera->setAspectRatio(Ogre::Real(16.0 / 9.0));
}
//-------------------------------------------------------------------------------------
void BaseApplication::setupResources(void)
{
    // Load resource paths from config file
    Ogre::ConfigFile cf;
    cf.load(mResourcesCfg);

    // Go through all sections & settings in the file
    Ogre::ConfigFile::SectionIterator seci = cf.getSectionIterator();

    Ogre::String secName, typeName, archName;
    while (seci.hasMoreElements())
    {
        secName = seci.peekNextKey();
        Ogre::ConfigFile::SettingsMultiMap *settings = seci.getNext();
        Ogre::ConfigFile::SettingsMultiMap::iterator i;
        for (i = settings->begin(); i != settings->end(); ++i)
        {
            typeName = i->first;
            archName = i->second;
            Ogre::ResourceGroupManager::getSingleton().addResourceLocation(
                archName, typeName, secName);
        }
    }
}
//-------------------------------------------------------------------------------------
void BaseApplication::createResourceListener(void)
{

}
//-------------------------------------------------------------------------------------
void BaseApplication::loadResources(void)
{
    Ogre::ResourceGroupManager::getSingleton().initialiseAllResourceGroups();
}
//-------------------------------------------------------------------------------------
void BaseApplication::go(void)
{
#ifdef _DEBUG
    mResourcesCfg = "resources_d.cfg";
    mPluginsCfg = "plugins_d.cfg";
#else
    mResourcesCfg = "resources.cfg";
    mPluginsCfg = "plugins.cfg";
#endif

    if (!setup())
        return;
#ifdef EN_OGRE_RENDER_LOOP
    mRoot->startRendering();
#else
		int nFrameDuration = 30;
        //assert(mActiveRenderer != 0);
        //mRoot->mActiveRenderer->_initRenderTargets();
		Ogre::RenderSystem *mActiveRenderer = mRoot->getRenderSystem();
		mActiveRenderer->_initRenderTargets();

        // Clear event times
		mRoot->clearEventTimes();

        // Infinite loop, until broken out of by frame listeners
        // or break out by calling queueEndRendering()
        //mRoot->mQueuedEnd = false;

        while( true/*!mQueuedEnd*/ )
        {
			//Pump messages in all registered RenderWindow windows
			Ogre::WindowEventUtilities::messagePump();

			int startTime = GetTickCount();
			if (!mRoot->renderOneFrame())
                break;
			int endTime = GetTickCount();
			int renderTime = endTime - startTime;
			if(renderTime < nFrameDuration) {
				Sleep(nFrameDuration - renderTime);
			}
        }
#endif
    // clean up
    destroyScene();
}

bool BaseApplication::manualInitialize()
{
	Ogre::RenderSystem *renderSystem;
    bool ok = false;
    Ogre::RenderSystemList renderers =
        Ogre::Root::getSingleton().getAvailableRenderers();

    // See if the list is empty (no renderers available)
    if(renderers.empty())
        return false;

    for(Ogre::RenderSystemList::iterator it = renderers.begin();
        it != renderers.end(); it++) {
        renderSystem = (*it);
		Ogre::String rendererName = renderSystem->getName();
		if(rendererName.find(mRenderingSystem) != Ogre::String::npos) {
            ok = true;
            break;
        }
    }

    if(!ok) {
        // We still don't have a renderer; pick
        // up the first one from the list
        renderSystem = (*renderers.begin());
    }

    Ogre::Root::getSingleton().setRenderSystem(renderSystem);

	// Manually set some configuration options (optional)
	renderSystem->setConfigOption("VSync","Yes");
	renderSystem->setConfigOption("Video Mode", mVideoMode.c_str());
	renderSystem->setConfigOption("Full Screen", mFullScreen.c_str());
	return true;

}
//-------------------------------------------------------------------------------------
bool BaseApplication::setup(void)
{
    mRoot = new Ogre::Root(mPluginsCfg, mOgreCfg, mLogCfg);

    setupResources();

    bool carryOn = configure();
    if (!carryOn) return false;

    chooseSceneManager();
    createCamera();
    createViewports();

    // Set default mipmap level (NB some APIs ignore this)
    Ogre::TextureManager::getSingleton().setDefaultNumMipmaps(5);

    // Create any resource listeners (for loading screens)
    createResourceListener();
    // Load resources
    loadResources();

    // Create the scene
    createScene();
    createFrameListener();

    Ogre::TextureFilterOptions tfo;
    unsigned int aniso;
	//tfo = Ogre::TFO_TRILINEAR;
	//aniso = 1;
	tfo = Ogre::TFO_ANISOTROPIC;
	aniso = 8;
	//tfo = Ogre::TFO_BILINEAR;
	//aniso = 1;
	Ogre::MaterialManager::getSingleton().setDefaultTextureFiltering(tfo);
	Ogre::MaterialManager::getSingleton().setDefaultAnisotropy(aniso);


    return true;
};
//-------------------------------------------------------------------------------------
bool BaseApplication::frameRenderingQueued(const Ogre::FrameEvent& evt)
{
    if(mWindow->isClosed())
        return false;

    if(mShutDown)
        return false;

    //Need to capture/update each device
    mKeyboard->capture();
//#ifdef EN_MOUSE
#ifdef ENABLE_ONSCREEN_HELP			// Mouse Needed for tray manager, eventhough not used
    mMouse->capture();
#endif

#ifdef ENABLE_ONSCREEN_HELP
    mTrayMgr->frameRenderingQueued(evt);
    if (!mTrayMgr->isDialogVisible())
#endif
    {
        mCameraMan->frameRenderingQueued(evt);   // if dialog isn't up, then update the camera
    }

    return true;
}
//-------------------------------------------------------------------------------------
bool BaseApplication::keyPressed( const OIS::KeyEvent &arg )
{

#ifdef ENABLE_ONSCREEN_HELP
    if (mTrayMgr->isDialogVisible()) return true;   // don't process any more keys if dialog is up
    if (arg.key == OIS::KC_F)   // toggle visibility of advanced frame stats
    {
        mTrayMgr->toggleAdvancedFrameStats();
    }
    else if (arg.key == OIS::KC_F3)   // toggle visibility of even rarer debugging details
    {
        if (mStatusPanel->getTrayLocation() == OgreBites::TL_NONE)
        {
            mTrayMgr->moveWidgetToTray(mStatusPanel, OgreBites::TL_TOPRIGHT, 0);
            mStatusPanel->show();
        } else {
            mTrayMgr->removeWidgetFromTray(mStatusPanel);
            mStatusPanel->hide();
        }
    }
    else if (arg.key == OIS::KC_F1)   // toggle visibility of help panel
    {
        if (mHelpPanelF1->getTrayLocation() == OgreBites::TL_NONE) {
            mTrayMgr->moveWidgetToTray(mHelpPanelF1, OgreBites::TL_BOTTOMLEFT, 0);
            mHelpPanelF1->show();
        } else {
            mTrayMgr->removeWidgetFromTray(mHelpPanelF1);
            mHelpPanelF1->hide();
        }
    }
    else if (arg.key == OIS::KC_F2)   // toggle visibility of help panel
    {
        if (mHelpPanelF2->getTrayLocation() == OgreBites::TL_NONE) {
            mTrayMgr->moveWidgetToTray(mHelpPanelF2, OgreBites::TL_BOTTOMLEFT, 0);
            mHelpPanelF2->show();
        } else {
            mTrayMgr->removeWidgetFromTray(mHelpPanelF2);
            mHelpPanelF2->hide();
        }
    }

    else if(arg.key == OIS::KC_F5)   // refresh all textures
    {
        Ogre::TextureManager::getSingleton().reloadAll();
    }
    else if (arg.key == OIS::KC_SYSRQ)   // take a screenshot
    {
        mWindow->writeContentsToTimestampedFile("screenshot", ".jpg");
    }
    else 
#endif
	if (arg.key == OIS::KC_ESCAPE)
    {
        mShutDown = true;
	} else if (arg.key == OIS::KC_F10){
		SetFullScreenNoCaption(!mWindow->isFullScreen());
	}
    mCameraMan->injectKeyDown(arg);
    return true;
}

bool BaseApplication::keyReleased( const OIS::KeyEvent &arg )
{
    mCameraMan->injectKeyUp(arg);
    return true;
}

bool BaseApplication::mouseMoved( const OIS::MouseEvent &arg )
{
#ifdef ENABLE_ONSCREEN_HELP
    if (mTrayMgr->injectMouseMove(arg)) 
		return true;
#endif
    mCameraMan->injectMouseMove(arg);
    return true;
}

bool BaseApplication::mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
#ifdef ENABLE_ONSCREEN_HELP
    if (mTrayMgr->injectMouseDown(arg, id)) 
		return true;
#endif
    mCameraMan->injectMouseDown(arg, id);
    return true;
}

bool BaseApplication::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
#ifdef ENABLE_ONSCREEN_HELP
    if (mTrayMgr->injectMouseUp(arg, id)) 
		return true;
#endif
    mCameraMan->injectMouseUp(arg, id);
    return true;
}

void BaseApplication::SetFullScreenNoCaption(bool fFullScreen)
{
	HWND hwnd;
    mWindow->getCustomAttribute("WINDOW", (void*)&hwnd);
	HMONITOR monitor = MonitorFromWindow(hwnd, MONITOR_DEFAULTTONEAREST); 
	MONITORINFO info; 
	info.cbSize = sizeof(MONITORINFO); 
	GetMonitorInfo(monitor, &info); 
	int w = info.rcMonitor.right - info.rcMonitor.left; 
	int h = info.rcMonitor.bottom - info.rcMonitor.top; 
	mWindow->setFullscreen(fFullScreen, w, h);
}

//Adjust mouse clipping area
void BaseApplication::windowResized(Ogre::RenderWindow* rw)
{
    unsigned int width, height, depth;
    int left, top;
    rw->getMetrics(width, height, depth, left, top);
#ifdef ENABLE_ONSCREEN_HELP
    const OIS::MouseState &ms = mMouse->getMouseState();
    ms.width = width;
    ms.height = height;
#endif
}

//Unattach OIS before window shutdown (very important under Linux)
void BaseApplication::windowClosed(Ogre::RenderWindow* rw)
{
    //Only close for window that created OIS (the main window in these demos)
    if( rw == mWindow )
    {
        if( mInputManager )
        {
#ifdef ENABLE_ONSCREEN_HELP
            mInputManager->destroyInputObject( mMouse );
#endif
            mInputManager->destroyInputObject( mKeyboard );

            OIS::InputManager::destroyInputSystem(mInputManager);
            mInputManager = 0;
        }
    }
}
